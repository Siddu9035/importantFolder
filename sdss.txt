simport {
  StyleSheet,
  Text,
  View,
  Image,
  ImageBackground,
  Pressable,
  FlatList,
  Dimensions,
  ActivityIndicator,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Touchable,
} from 'react-native';
import React, {useState, useEffect, useRef} from 'react';
import Logo from '../assets/images/logo1.svg';
import Shoppingcart from '../assets/images/shopping-cart.svg';
import Menu from '../assets/images/menu.svg';
import Filter from '../assets/images/filter.svg';
import Up from '../assets/images/up.svg';
// import PayPal from '../assets/images/paypal.svg';
// import MasterCard from '../assets/images/mastercard.svg';
// import MaestroCard from '../assets/images/maestro.svg';
// import AmericanExpress from '../assets/images/american.svg';
// import Visa from '../assets/images/visa.svg';
// import VisaLogo from '../assets/images/visalogo.svg';
// import DirectDebit from '../assets/images/directdebit.svg';
// import Caure from '../assets/images/Caure.svg';
// import Trust from '../assets/images/trustimage.svg';
// import Reviews from '../assets/images/see44reviews.svg';
import SocialMedia from '../assets/images/socialmedia.svg';
import Reviews from '../assets/images/reviews.svg';
import PaymentPage from '../assets/images/paymentpage.svg';
import axios from 'axios';
import {APIS} from '../src/configs/apiUrls';

const HomePage = ({navigation}) => {
  const [categories, setCategories] = useState([]);
  // const [isLoading, setIsLoading] = useState(true);
  const [isClicked, setIsClicked] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState({
    itemName: 'Newest Items',
    type: 'newlyUpdated',
  });
  const items = [
    {itemName: 'Newest Items', type: 'newluUpdated'},
    {itemName: 'Author', type: 'author'},
    {itemName: 'Title', type: 'title'},
    {itemName: 'Price-High', type: 'price_high'},
    {itemName: 'Price-Low', type: 'price_low'},
  ];
  const [page, setPage] = useState(1);
  const [inputSearch, setInputSearch] = useState('');
  const [error, setError] = useState('');
  const [collectableData, setCollectableData] = useState({});
  // const [loader, setLoader] = useState(true);

  useEffect(() => {
    getCatagories();
  }, []);

  useEffect(() => {
    getCollectibleItems(selectedFilter.type, page);
  }, [selectedFilter, page]);

  const getCatagories = async () => {
    // setIsLoading(true);
    try {
      // console.log("response",APIS.getCategories);
      let response = await axios.get(APIS.getCategories);
      setCategories(response.data.data);
      // setIsLoading(false);
    } catch (error) {
      console.error('response first error', error);
      // setIsLoading(false);
    }
  };

  const getCollectibleItems = async (filtertype, page) => {
    // setIsLoading(true);
    // setLoader(true);
    try {
      const apiUrls = `${APIS.getCollectableItems}${filtertype}/${page}/`;
      console.log('sksksksksks', filtertype);

      const response = await axios.get(apiUrls);

      const totalPages = response.data.data.totalpages;
      setCollectableData(response.data.data);

      console.log('response2', response.data.data);
      console.log('response 2', response.data.data.totalpages);
    } catch (error) {
      console.error('getCollectibleItems error:', error);
    } finally {
      // setIsLoading(false);
      // setLoader(false);
    }
  };
  /// first category items
  const renderCategories = ({item}) => (
    <View style={styles.cardContent}>
      <Image source={{uri: item.image}} style={styles.cardImage} />
      <Text style={styles.cardTitle}>{item.title}</Text>
      <Text style={styles.cardText}>{item.name}</Text>
    </View>
  );

  /// second category items
  const renderSecondCategory = ({item}) => (
    <View style={styles.secondCard}>
      <View style={{alignItems: 'center', padding: 10}}>
        {item.image && item.image.length > 0 && (
          <Image
            source={{uri: item.image[0].url}} // Display the first image if available
            style={{width: 200, height: 200, marginTop: 10}}
          />
        )}
      </View>
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}>
        <Text style={styles.secondcardauthor}>{item.author}</Text>
        <Text style={styles.secondcardtext}>â‚¹ {item.price}</Text>
      </View>
      <Text style={styles.secondcardtitle}>{item.title}</Text>
      <Text style={styles.secondcarddes}>{item.description}</Text>
      <TouchableOpacity style={styles.Addtocartbutton} activeOpacity={1}>
        <Text style={styles.addtocarttext}>Add To Cart</Text>
      </TouchableOpacity>
    </View>
  );
  // page background color
  const getBackground = item => {
    if (item?.value === page) {
      return '#873900';
    } else {
      return '#FFF8F2';
    }
  };
  // page text color
  const getTextColor = item => {
    if (item?.value === page) {
      return '#FFF8F2';
    } else {
      return '#873900';
    }
  };

  // button pagination starts
  const renderButtons = () => {
    
    let data = [
      {
        id: 1,
        value: page > Math.floor(collectableData.totalpages / 2) ? 1 : page,
      },
      {
        id: 2,
        value:
          page > Math.floor(collectableData.totalpages / 2)
            ? 2
            : page + 1 > collectableData.totalpages
            ? ''
            : page + 1,
      },
      {id: 3, value: collectableData.totalpages > 4 ? '...' : ''},
      {
        id: 4,
        value:
          page > Math.floor(collectableData.totalpages / 2)
            ? page - 1
            : collectableData.totalpages - 1 > 0
            ? collectableData.totalpages - 1
            : '',
      },
      {
        id: 5,
        value:
          page > Math.floor(collectableData.totalpages / 2)
            ? page
            : collectableData.totalpages,
      },
    ];

    data = data.filter(item => item.value != '');
    data = [...new Map(data.map(item => [item.value, item])).values()];
    return (
      <View
        style={{
          flexDirection: 'row',
          marginTop: 10,
          alignItems: 'center',
          justifyContent: 'space-around',
          flex: 0.5,
          width: '100%',
        }}>
        <TouchableOpacity
          onPress={() => {
            setPage(page - 1);
          }}
          disabled={page <= 1 ? true : false}
          style={{
            borderWidth: 1,
            margin: 5,
            width: 30,
            height: 30,
            alignItems: 'center',
            justifyContent: 'center',
            borderColor: '#873900',
            borderRadius: 5,
            // opacity: page <= 1 ? 0.3 : 1,
          }}>
          <Text style={{color: '#873900'}}>{'<'}</Text>
        </TouchableOpacity>
        {data.map(item => (
          <TouchableOpacity
            disabled={item.id === 3 ? true : false}
            key={item.id}
            style={{
              justifyContent: 'center',
              alignItems: 'center',
              borderWidth: 1,
              margin: 5,
              padding: 5,
              width: 50,
              height: 50,
              borderColor: '#873900',
              marginBottom: 10,
              borderRadius: 5,
              backgroundColor: getBackground(item),
            }}
            onPress={() => {
              setPage(item.value);
            }}>
            <Text
              style={{
                color: getTextColor(item),
              }}>
              {item.value}
            </Text>
          </TouchableOpacity>
        ))}
        <TouchableOpacity
          onPress={() => {
            setPage(page + 1);
          }}
          disabled={page === collectableData.totalpages}
          style={{
            borderWidth: 1,
            margin: 5,
            width: 30,
            height: 30,
            alignItems: 'center',
            justifyContent: 'center',
            borderColor: '#873900',
            borderRadius: 5,
            // opacity: page === collectableData.totalpages ? 0.3 : 1,
          }}>
          <Text style={{color: '#873900'}}>{'>'}</Text>
        </TouchableOpacity>
      </View>
    );
  };

  // page searching design
  const renderSearch = () => (
    <>
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'center',
        }}>
        <Text
          style={{
            color: 'black',
            fontFamily: 'RobotoSlab-Regular',
            fontSize: 15,
            paddingRight: 10,
          }}>
          Go To Page
        </Text>
        <TextInput
          style={{
            width: 40,
            height: 40,
            borderWidth: 1,
            textAlign: 'center',
            textAlignVertical: 'center',
            color: '#873900',
            borderColor: '#873900',
            borderRadius: 5,
            padding: 5,
          }}
          keyboardType="phone-pad"
          maxLength={4}
          onChangeText={text => setInputSearch(text)}
          value={inputSearch}
        />
        <TouchableOpacity onPress={handleGoToPage}>
          <Text
            style={{
              color: 'black',
              paddingLeft: 20,
              textDecorationLine: 'underline',
              fontSize: 15,
              fontFamily: 'RobotoSlab-Regular',
            }}>
            Go {'>'}
          </Text>
        </TouchableOpacity>
      </View>
      {error !== '' && <Text style={{color: 'red'}}>{error}</Text>}
    </>
  );
  /// page search functionality
  const handleGoToPage = () => {
    const enteredPage = parseInt(inputSearch); // Convert user's input to a number

    // Check if parsedPage is a valid number and within the allowed range
    if (enteredPage >= 1 && enteredPage <= collectableData.totalpages) {
      setPage(enteredPage); // Update the current page
      setError('');
      setInputSearch('');
    } else {
      setError('Page number should be in allowed range');
    }
  };

  return (
    <ImageBackground
      source={require('../assets/images/bacgroundImage.jpg')}
      style={styles.imageBacground}>
      <View style={styles.container}>
        <View style={styles.headers}>
          <View>
            <Logo />
          </View>
          <Pressable
            style={{
              width: 45,
              height: 45,
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: '#873900',
              borderRadius: 50,
            }}>
            <Shoppingcart width={22} height={22} />
          </Pressable>
          <Pressable style={{}} onPress={() => navigation.openDrawer()}>
            <Menu width={43} height={43} />
          </Pressable>
        </View>
        {/* {!isLoading ? ( */}
        <ScrollView style={{flex: 1}} showsVerticalScrollIndicator={false}>
          <Text style={styles.headerText}>Collectables</Text>
          <FlatList
            scrollEnabled={false}
            data={categories}
            renderItem={renderCategories}
            numColumns={2}
          />
          <Text style={styles.secondHeader}>Collectable items</Text>
          <View
            style={{
              flexDirection: 'row',
              justifyContent:  'space-between',
              alignItems: 'center',
              alignSelf: 'center',
              right: -5,
              // position: 'relative',
            }}>
            <View style={styles.filterContent}>
              <Filter width={20} height={18} />
              <Text style={styles.filterText}>Filters</Text>
            </View>
            <TouchableOpacity
              style={styles.dropdownSelector}
              onPress={() => setIsClicked(!isClicked)}
              activeOpacity={1}>
              <Text style={styles.dropdownText}>{selectedFilter.itemName}</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={{position: 'relative', right: 45}}
              onPress={() => setIsClicked(!isClicked)}>
              <Up
                width={20}
                height={10}
                style={[isClicked && styles.reverseImage]}
              />
            </TouchableOpacity>
          </View>
          <View>
            {isClicked && (
              <ScrollView style={styles.dropdownArea}>
                {items.map((item, index) => (
                  <TouchableOpacity
                    key={index}
                    disabled={item.itemName === selectedFilter.itemName}
                    onPress={() => {
                      setSelectedFilter(item);
                      setPage(1);
                      setIsClicked(false);
                    }}>
                    <Text
                      style={{
                        color:
                          item.itemName === selectedFilter.itemName
                            ? 'white'
                            : 'black',
                        padding: 4,
                        fontFamily: 'OpenSans-Regular',
                        fontSize: 16,
                        paddingLeft: 10,
                        fontWeight: '400',
                        backgroundColor:
                          item.itemName === selectedFilter.itemName &&
                          '#873900',
                      }}>
                      {item.itemName}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            )}
          </View>
          <FlatList
            data={collectableData.data}
            renderItem={renderSecondCategory}
            scrollEnabled={false}
          />
          <View
            style={{
              backgroundColor: '#FFF8F2',
              height: 180,
              flex: 1,
              alignSelf: 'center',
              alignItems: 'center',
              justifyContent: 'center',
            }}>
            {renderButtons()}
            {renderSearch()}
          </View>
          {/* {loader && ( */}
          {/* <View style={styles.Loader}>
                <ActivityIndicator
                  size={50}
                  color={'#8B0000'}></ActivityIndicator>
              </View> */}
          {/* )} */}

          <View style={styles.footerContainer}>
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                justifyContent: 'space-around',
                height:'30%',
                width:'100%',
                marginTop:20
                // borderWidth:3
              }}>
                 {/* <Reviews /> */}
                 {/* <PaymentPage /> */}
                 <Image source={require('../assets/images/Payment1.png')}  style={{ height:'100%', width:'47%', resizeMode: 'stretch'}}/>
                 <Image source={require('../assets/images/Reviews1.png')}  style={{ width:'47%', height:'100%', resizeMode: 'stretch'}}/>
              {/* <View
                style={{
                  flex: 0.9,
                  height: 110,
                  backgroundColor: '#FFF8F2',
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginTop: 20,
                  marginHorizontal: 5,
                  borderRadius: 5,
                }}> */}
                {/* <PayPal />
                <View style={{flexDirection: 'row', padding: 5}}>
                  <MasterCard />
                  <MaestroCard />
                  <AmericanExpress />
                </View> */}
               
                {/* <View style={{flexDirection: 'row'}}>
                  <Visa />
                  <VisaLogo />
                  <DirectDebit />
                </View> */}
                
              {/* </View> */}
              {/* <View
                style={{
                  backgroundColor: '#FFF8F2',
                  width: 175,
                  height: 110,
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginTop: 20,
                  marginHorizontal: 5,
                  borderRadius: 5,
                }}>
                <View style={{padding: 5}}>
                  <Caure width={150} height={30} />
                </View>
                <View style={{padding: 2}}>
                  <Trust />
                </View>
                <View style={{padding: 2}}>
                  <Reviews />
                </View>
              </View> */}
            </View>
            <View style={{marginTop: 50}}>
              <SocialMedia />
            </View>
            <Text
              style={{textAlign: 'center', marginTop: 50, color: '#FFF8F2'}}>
              Copyright Â© 2023, Pemmymead | All Rights Reserved | Terms &
              Conditions | Privacy Policy
            </Text>
          </View>
        </ScrollView>
        {/* ) : ( */}
        {/* <View style={styles.Loader}>
            <ActivityIndicator size={50} color={'#8B0000'}></ActivityIndicator>
          </View> */}
        {/* )} */}

        {/* {isLoading && (
          <View style={styles.Loader}>
            <ActivityIndicator size={50} color={'#8B0000'}></ActivityIndicator>
          </View>
        )} */}
      </View>
    </ImageBackground>
  );
};
export default HomePage;

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  imageBacground: {
    flex: 1,
  },
  headers: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 15,
    marginTop: 15,
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  headerText: {
    fontFamily: 'RobotoSlab-Regular',
    color: 'black',
    fontWeight: '600',
    fontSize: 26,
    marginBottom: 20,
    paddingHorizontal: 15,
  },
  secondHeader: {
    fontFamily: 'RobotoSlab-Regular',
    color: 'black',
    fontWeight: '600',
    fontSize: 26,
    marginTop: 40,
    paddingHorizontal: 15,
    marginBottom: 25,
  },
  cardImage: {
    width: 107,
    height: 120,
    resizeMode: 'cover',
  },
  cardContent: {
    marginHorizontal: 10,
    flex: 1,
    minHeight: 280,
    backgroundColor: '#FFF8F2',
    elevation: 10,
    alignItems: 'center',
    marginBottom: 18,
    borderRadius: 5,
    padding: 12,
  },
  cardTitle: {
    fontSize: 15,
    textAlign: 'center',
    fontFamily: 'OpenSans-Regular',
    fontWeight: '400',
    color: 'black',
    padding: 5,
  },
  cardText: {
    fontSize: 14,
    textAlign: 'center',
    fontFamily: 'RobotoSlab-Regular',
    fontWeight: 'bold',
    color: 'black',
  },
  Loader: {
    position: 'absolute',
    alignSelf: 'center',
    justifyContent: 'center',
    alignItems: 'center',
    width: '100%',
    height: '100%',
    backgroundColor: 'rgba(255, 255, 255, 0.7)',
  },
  filterContent: {
    flexDirection: 'row',
    alignItems: 'center',
    // width: '60%',
    paddingHorizontal: 15,
  },
  filterText: {
    fontFamily: 'RobotoSlab-Regular',
    marginLeft: 7,
    color: '#454545',
    fontSize: 16,
    fontWeight: '600',
  },
  dropdownSelector: {
    justifyContent: 'center',
    // alignItems: 'center',
    // width: Dimensions.get('window').width - 100,
    width: '60%',
    height: 40,
    borderWidth: 1,
    borderColor: '#873900',
    paddingLeft: 10,
  },
  dropdownText: {
    color: 'black',
    fontFamily: 'RobotoSlab-Regular',
    fontSize: 16,
    fontWeight: '400',
  },
  dropdownArea: {
    width: '60%',
    flex: 1,
    alignSelf: 'center',
    marginLeft: 97,
    minHeight: 100,
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#873900',
  },

  secondCard: {
    marginTop: 30,
    width: '80%',
    minHeight: 380,
    alignSelf: 'center',
    margin: 20,
    padding: 20,
    paddingBottom: 40,
    elevation: 10,
    backgroundColor: '#FFF8F2',
    borderRadius: 5,
  },
  secondcardauthor: {
    padding: 10,
    color: 'black',
    flex: 1,
    fontFamily: 'RobotoSlab-Regular',
    fontSize: 20,
    fontWeight: '700',
  },
  secondcardtitle: {
    padding: 10,
    color: 'black',
    flex: 1,
    fontFamily: 'OpenSans-Regular',
    fontSize: 16,
    fontWeight: '700',
  },
  secondcardtext: {
    fontSize: 20,
    color: 'black',
    fontFamily: 'RobotoSlab-Regular',
    fontWeight: '700',
  },
  secondcarddes: {
    color: 'black',
    flex: 1,
    paddingLeft: 10,
    fontFamily: 'OpenSans-Regular',
    fontSize: 16,
  },
  reverseImage: {
    transform: [{rotate: '180deg'}],
    padding: 10,
  },

  Addtocartbutton: {
    width: 100,
    height: 40,
    backgroundColor: '#873900',
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'flex-end',
    marginTop: 10,
    borderRadius: 5,
  },
  addtocarttext: {
    color: 'white',
    fontSize: 16,
    fontFamily: 'RobotoSlab-Regular',
    fontWeight: '600',
  },
  buttonContainer1: {
    alignSelf: 'center',
    marginBottom: 10,
    alignItems: 'center',
    padding: 10,
    backgroundColor: '#FFF8F2',
    height: 150,
    elevation: 10,
    borderRadius: 5,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    flex: 1,
    width: '90%',
    marginHorizontal: 25,
  },
  paginationButtons: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginVertical: 10,
    minWidth: '60%',
  },
  pageButton: {
    marginHorizontal: 4,
    paddingVertical: 6,
    borderWidth: 1,
    width: 40,
    height: 50,
    borderColor: '#873900',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 5,
  },
  pageButton1: {
    marginHorizontal: 4,
    paddingVertical: 6,
    borderWidth: 1,
    width: 40,
    height: 50,
    borderColor: '#873900',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 5,
  },
  activePageButton: {
    backgroundColor: '#873900',
    color: 'white',
  },
  pageButtonText: {
    fontSize: 16,
    color: '#873900',
    fontFamily: 'RobotoSlab-Regular',
    fontWeight: 'bold',
  },
  ellipsis: {
    borderWidth: 1,
    width: 40,
    height: 50,
    fontSize: 16,
    marginHorizontal: 5,
    color: '#873900',
    borderColor: '#873900',
    textAlign: 'center',
    textAlignVertical: 'center',
    borderRadius: 5,
  },
  arrowbutton: {
    width: 40,
    height: 40,
    borderWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    borderColor: '#873900',
    borderRadius: 5,
  },
  arrowbackbutton: {
    width: 40,
    height: 40,
    borderWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    borderColor: '#873900',
    borderRadius: 5,
  },
  footerContainer: {
    flex: 1,
    height: 350,
    backgroundColor: '#873900',
    marginTop: 20,
    alignItems: 'center',
  },
});
